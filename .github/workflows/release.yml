name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check version not already tagged
      run: |
        VERSION="${{ steps.validate.outputs.version }}"
        if git tag | grep -q "^v$VERSION$"; then
          echo "Error: Version $VERSION already exists"
          exit 1
        fi

  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Update version in files
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # Update Python version
        sed -i "s/__version__ = '.*'/__version__ = '$VERSION'/" godaddy_cli/__version__.py

        # Update package.json version
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" web-ui/package.json

        # Update pyproject.toml if needed
        if grep -q "version.*=" pyproject.toml; then
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        fi

    - name: Generate changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # Create changelog entry
        echo "## [$VERSION] - $(date +%Y-%m-%d)" > CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG:" >> CHANGELOG_NEW.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG_NEW.md
        else
          echo "### Initial release" >> CHANGELOG_NEW.md
        fi

        echo "" >> CHANGELOG_NEW.md

        # Prepend to existing changelog
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG_NEW.md CHANGELOG.md > CHANGELOG_TEMP.md
          mv CHANGELOG_TEMP.md CHANGELOG.md
        else
          mv CHANGELOG_NEW.md CHANGELOG.md
        fi

    - name: Commit version updates
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add .
        git commit -m "chore: bump version to $VERSION"
        git push

  build-release:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: [validate, prepare]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: windows-latest
            target: windows-x64
          - os: macos-latest
            target: macos-x64

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build web UI
      run: |
        cd web-ui
        npm ci
        npm run build

    - name: Install PyInstaller
      run: |
        pip install pyinstaller

    - name: Build standalone executable
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # Create spec file for PyInstaller
        cat > godaddy-cli.spec << EOF
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None

        a = Analysis(
            ['godaddy_cli/cli.py'],
            pathex=['.'],
            binaries=[],
            datas=[
                ('godaddy_cli/web/static', 'godaddy_cli/web/static'),
                ('godaddy_cli/templates', 'godaddy_cli/templates'),
            ],
            hiddenimports=[
                'godaddy_cli.commands.dns',
                'godaddy_cli.commands.domain',
                'godaddy_cli.commands.config',
                'godaddy_cli.commands.auth',
                'godaddy_cli.commands.template',
                'godaddy_cli.commands.bulk',
                'godaddy_cli.commands.export',
                'godaddy_cli.commands.import_cmd',
                'godaddy_cli.commands.monitor',
                'godaddy_cli.commands.init',
                'godaddy_cli.commands.deploy',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='godaddy-cli',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

        # Build executable
        pyinstaller godaddy-cli.spec --clean

    - name: Create release archive
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        TARGET="${{ matrix.target }}"

        # Create release directory
        mkdir -p release

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          EXECUTABLE="dist/godaddy-cli.exe"
          ARCHIVE="godaddy-dns-cli-$VERSION-$TARGET.zip"

          # Create zip archive
          cd dist
          7z a "../release/$ARCHIVE" godaddy-cli.exe
        else
          EXECUTABLE="dist/godaddy-cli"
          ARCHIVE="godaddy-dns-cli-$VERSION-$TARGET.tar.gz"

          # Make executable
          chmod +x "$EXECUTABLE"

          # Create tar.gz archive
          cd dist
          tar -czf "../release/$ARCHIVE" godaddy-cli
        fi

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.target }}
        path: release/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, prepare, build-release]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Download all release assets
      uses: actions/download-artifact@v3
      with:
        path: release-assets

    - name: Prepare release assets
      run: |
        mkdir -p final-release
        find release-assets -name "*.zip" -o -name "*.tar.gz" | xargs -I {} cp {} final-release/
        ls -la final-release/

    - name: Build Python package
      run: |
        python -m pip install --upgrade pip build
        python -m build
        cp dist/* final-release/

    - name: Extract changelog for release
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # Extract changelog for this version
        awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md

        # Set output for release notes
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create git tag
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        name: Release ${{ needs.validate.outputs.version }}
        body: ${{ steps.changelog.outputs.notes }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: final-release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, create-release]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Update documentation
      run: |
        VERSION="${{ needs.validate.outputs.version }}"

        # Update installation instructions in README if needed
        if grep -q "pip install godaddy-dns-cli" README.md; then
          echo "README.md already contains installation instructions"
        fi

    - name: Notify release channels
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "ðŸŽ‰ GoDaddy DNS CLI v$VERSION has been released!"
        echo "ðŸ“¦ Available on PyPI: pip install godaddy-dns-cli==$VERSION"
        echo "ðŸ”— GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"